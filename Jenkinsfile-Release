pipeline {
    agent any

    environment {
        IMAGE_NAME = 'suresh53/flask-app'
        IMAGE_TAG = "${IMAGE_NAME}:${env.GIT_COMMIT}"
        KUBECONFIG = credentials('kubeconfig-cred')
        AWS_ACCESS_KEY_ID = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-key')
        GH_TOKEN = credentials('github')
        POETRY_HOME = "/var/lib/jenkins/.local"
    }

    stages {
        stage("Check for Git Tag") {
            steps {
                script {
                    def tag = sh(returnStdout: true, script: "git tag --contains").trim()
                    env.GIT_TAG = tag ?: ''
                    echo "GIT_TAG is set to: ${env.GIT_TAG}"
                    env.IMAGE_TAG_RELEASE = "${IMAGE_NAME}:${GIT_TAG}"
                }
            }
        }

        stage('Setup') {
            steps {
                script {
                    sh '''
                        # Install Poetry
                        curl -sSL https://install.python-poetry.org | POETRY_HOME=$POETRY_HOME python3 -
                        
                        # Add poetry to PATH and install dependencies
                        export PATH="$POETRY_HOME/bin:$PATH"
                        poetry install --no-root
                    '''
                }
            }
        }

        stage('Create Release') {
            when {
                expression { return env.GIT_TAG == "" }
            }
            steps {
                script {
                    sh '''
                        # Ensure poetry is in PATH
                        export PATH="$POETRY_HOME/bin:$PATH"
                        
                        # Debug: Check poetry installation
                        echo "Poetry version:"
                        poetry --version
                        
                        # Run semantic release
                        poetry run semantic-release version
                        poetry run semantic-release publish
                    '''
                }
            }
        }

        stage("Build and Deploy") {
            when {
                expression { return env.GIT_TAG != "" }
            }
            stages {
                stage('Docker Login') {
                    steps {
                        withCredentials([usernamePassword(credentialsId: 'docker-creds', 
                                      usernameVariable: 'USERNAME', 
                                      passwordVariable: 'PASSWORD')]) {
                            sh 'echo ${PASSWORD} | docker login -u ${USERNAME} --password-stdin'
                            echo 'Login successfully'
                        }
                    }
                }
                
                stage('Build') {
                    steps {
                        sh 'docker build -t ${IMAGE_TAG} -t ${IMAGE_TAG_RELEASE} .'
                        echo "Docker image build successfully"
                        sh 'docker image ls'
                    }
                }

                stage('Push Image') {
                    steps {
                        sh 'docker push --all-tags ${IMAGE_NAME}'
                        echo "Docker image push successfully"
                    }
                }

                stage('Deploy to k8s') {
                    steps {
                        sh '''
                            kubectl apply -f deployment.yaml
                            kubectl apply -f service.yaml
                            kubectl set image deployment/flask-app flask-app=${IMAGE_TAG}
                            kubectl rollout status deployment/flask-app
                            
                            kubectl get deployment flask-app
                            kubectl get service flask-app-service
                        '''
                    }
                }
            }
        }
    }
}